// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector] // note: not just "vector"

}

model User {
  id             String           @id @default(cuid())
  clerkId        String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  imageUrl       String?
  firstName      String?
  lastName       String?
  emailAddress   String           @unique
  credits        Int              @default(250)
  
  // relation back to join table
  userProjects   UserToProject[]
  askedQuestions Question[]
}

model Project {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  githubUrl      String
  deletedAt      DateTime?
  
  // relation back to join table
  userProjects   UserToProject[]
  sourceCodeEmbeddings SourceCodeEmbedding[] // Updated reference
  commits Commit[]
  questions Question[]
}

model UserToProject {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // FK scalar fields must match the target PK types
  userId     String
  projectId  String
  
  // relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Keep (userId, projectId) unique to avoid duplicates
  @@unique([userId, projectId])
  
  // Helpful indexes
  @@index([userId])
  @@index([projectId])
}

model SourceCodeEmbedding {
  id               String @id @default(cuid())
  summaryEmbedding  Unsupported("vector(768)")
  sourceCode       String
  fileName         String
  summary          String
  projectId        String
  project          Project @relation(fields: [projectId], references: [id])
}


model Question {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    String
  answer      String

  fileReference Json?
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  userId String
  user User     @relation(fields: [userId], references: [id])
}
model Commit {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    projectId String
    project Project @relation(fields:[projectId],references:[id])

    commitMessage String
    commitHash String
    commitAuthorName String
    commitAuthorAvatar String?
    commitDate DateTime
    summary String
}

